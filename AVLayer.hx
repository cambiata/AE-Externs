extern class AVLayer extends Layer {
	// var readonly : Dynamic;
	var source:Dynamic;
	var isNameFromSource:Bool;
	var height:Float;
	var width:Float;
	var audioEnabled:Bool;
	var motionBlur:Bool;
	var effectsActive:Bool;
	var adjustmentLayer:Bool;
	var guideLayer:Bool;
	var threeDLayer:Bool;
	var threeDPerChar:Bool;
	var environmentLayer:Bool;
	var canSetCollapseTransformation:Bool;
	var collapseTransformation:Bool;
	var frameBlending:Bool;
	var frameBlendingType:FrameBlendingType;
	var canSetTimeRemapEnabled:Bool;
	var timeRemapEnabled:Bool;
	var hasAudio:Bool;
	var audioActive:Bool;
	var blendingMode:BlendingMode;
	var preserveTransparency:Bool;
	var trackMatteType:TrackMatteType;
	var isTrackMatte:Bool;
	var hasTrackMatte:Bool;
	var quality:LayerQuality;
	var samplingQuality:LayerSamplingQuality;
	function audioActiveAtTime(time:Float):Bool;
	function calculateTransformFromPoints(pointTopLeft:Array<Dynamic>, pointTopRight:Dynamic, pointBottomRight:Dynamic):Dynamic;
	function replaceSource(newSource:AVItem, fixExpressions:Bool):Void;
	function sourceRectAtTime(timeT:Float, extents:Bool):{
		var top:Float;
		var left:Float;
		var width:Float;
		var height:Float;
	};
	function openInViewer():haxe.extern.EitherType<Viewer, Null<Dynamic>>;
	function sourcePointToComp(point:Array<Dynamic>):Array<Dynamic>;
	function compPointToSource(point:Array<Dynamic>):Array<Dynamic>;
	var timeRemap:Property;
	// var mask:MaskPropertyGroup;
	var effect:PropertyGroup;
	var layerStyle:_LayerStyles;
	var geometryOption:_GeometryOptionsGroup;
	var materialOption:_MaterialOptionsGroup;
	var audio:_AudioGroup;
}
